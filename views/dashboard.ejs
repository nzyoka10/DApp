<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <!-- Bootstrap CSS -->
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #343a40;
            color: #ffffff;
        }

        .navbar {
            margin-bottom: 20px;
        }

        .navbar-brand,
        .navbar-text,
        .nav-link {
            color: #ffffff;
        }

        .navbar-brand:hover,
        .nav-link:hover {
            color: #d3d3d3;
        }

        .card {
            background-color: #495057;
            border: 1px solid #6c757d;
        }

        .card-header {
            background-color: #343a40;
            color: #ffffff;
            font-weight: bold;
        }

        .card-body {
            color: #ffffff;
        }

        .sidebar {
            background-color: #212529;
            padding: 15px;
            height: 100vh;
        }

        .sidebar .nav-item .nav-link {
            color: #ffffff;
        }

        .sidebar .nav-item .nav-link.active {
            background-color: #495057;
            color: #ffffff;
        }
    </style>
</head>

<body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <!-- <img src="img/logo.webp" alt="App logo"> -->
        <a class="navbar-brand" href="#">Wallet</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
            aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item">
                    <span class="navbar-text" id="walletName">
                        <!-- Wallet: <span id="walletAddress" class="text-danger">Not Connected</span> -->
                    </span>
                </li>
            </ul>
            <ul class="navbar-nav ml-auto">
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button"
                        data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Account
                    </a>
                    <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                        <a class="dropdown-item" href="#profile">Profile</a>
                        <a class="dropdown-item" href="/auth/logout">Logout</a>
                    </div>
                </li>
            </ul>
        </div>
    </nav>

    <div class="container-fluid dashboard-container">
        <div class="row">
            <!-- Sidebar -->
            <nav id="sidebar" class="col-md-3 sidebar">
                <h4 class="mb-4">Menu</h4>
                <ul class="nav flex-column">
                    <li class="nav-item">
                        <a class="nav-link active" href="#dashboard">Dashboard</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#profile">Profile</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#transfer">Transfer</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#transactions">Transactions</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#settings">Settings</a>
                    </li>
                </ul>
            </nav>

            <!-- Main Content -->
            <main class="col-md-9">
                <!-- Row for Connection and Balance Cards -->
                <div class="row mb-4">
                    <!-- Ethereum Connection Card -->
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">Ethereum Connection</div>
                            <div class="card-body">
                                <button id="connectWallet" class="btn btn-sm btn-success">Connect</button>
                                <p id="walletAddress" class="mt-3">Wallet Address: Not Connected</p>
                            </div>
                        </div>
                    </div>

                    <!-- Account Balance Card -->
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">Account Balance</div>
                            <div class="card-body">
                                <h3 id="balance" class="py-3">ETH <strong>0.0</strong></h3>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Cards for Transfer Funds and Recent Transactions side by side -->
                <div class="row mt-4">
                    <!-- Transfer Funds Card -->
                    <div class="col-md-6">
                        <div class="card" id="transfer">
                            <div class="card-header">Transfer Funds</div>
                            <div class="card-body">
                                <form id="transferForm">
                                    <div class="form-group">
                                        <label for="toAddress">To Address:</label>
                                        <input type="text" id="toAddress" class="form-control" required>
                                    </div>
                                    <div class="form-group">
                                        <label for="amount">Amount:</label>
                                        <input type="number" id="amount" class="form-control" required>
                                    </div>
                                    <button type="submit" class="btn btn-sm btn-success">Transfer</button>
                                </form>
                            </div>
                        </div>
                    </div>


                    <!-- Recent Transactions Card -->
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">Recent Transactions</div>
                            <div class="card-body">
                                <table class="table table-dark table-striped">
                                    <thead>
                                        <tr>
                                            <th>Date</th>
                                            <th>Transaction ID</th>
                                            <th>Amount</th>
                                            <th>Status</th>
                                        </tr>
                                    </thead>
                                    <tbody id="transactionList">
                                        <!-- Transactions will be dynamically added here -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>

                </div>
            </main>
        </div>
    </div>

    <!-- Bootstrap JS and dependencies -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/ethers/dist/ethers.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const connectButton = document.getElementById('connectWallet');
            const walletAddressElement = document.getElementById('walletAddress');
            const balanceElement = document.getElementById('balance');
            const transferForm = document.getElementById('transferForm');
            const transactionList = document.getElementById('transactionList');

            let provider;
            let signer;
            let transactions = []; // Array to store transaction records

            // Connect wallet function
            async function connectWallet() {
                if (typeof window.ethereum !== 'undefined') {
                    try {
                        // Request account access if needed
                        await window.ethereum.request({ method: 'eth_requestAccounts' });
                        provider = new ethers.providers.Web3Provider(window.ethereum);
                        signer = provider.getSigner();

                        // Get the connected address
                        const address = await signer.getAddress();
                        walletAddressElement.textContent = `Wallet Address: ${address}`;

                        // Fetch the balance of the connected account
                        const balance = await provider.getBalance(address);
                        balanceElement.innerHTML = `ETH <strong>${ethers.utils.formatEther(balance)}</strong>`;
                    } catch (error) {
                        console.error('Error connecting to the wallet:', error);

                        // Error messages based on the error type
                        if (error.code === 4001) {
                            alert('Connection request denied.');
                        } else {
                            alert('Failed to connect to wallet. Check console for details.');
                        }
                    }
                } else {
                    alert('MetaMask is not installed. Please install it to connect your wallet.');
                }
            }

            // Add event listener for the connect button
            connectButton.addEventListener('click', connectWallet);

            // Handle form submission for transferring ETH
            transferForm.addEventListener('submit', async (event) => {
                event.preventDefault();
                const toAddress = document.getElementById('toAddress').value;
                const amount = document.getElementById('amount').value;

                // Validation checks
                if (!ethers.utils.isAddress(toAddress)) {
                    alert('Invalid recipient address.');
                    return;
                }

                if (parseFloat(amount) <= 0) {
                    alert('Amount must be greater than zero.');
                    return;
                }

                try {
                    // Send the transaction
                    const tx = await signer.sendTransaction({
                        to: toAddress,
                        value: ethers.utils.parseEther(amount)
                    });

                    // Wait for the transaction to be mined
                    await tx.wait();

                    // Add the transaction details to the transactions array
                    const transactionRecord = {
                        date: new Date().toLocaleString(),
                        id: tx.hash,
                        amount: amount,
                        status: 'Success'
                    };
                    transactions.push(transactionRecord);

                    // Render the transactions
                    renderTransactions();

                    alert('Transaction successful!');
                } catch (error) {
                    console.error('Error sending transaction:', error);

                    // Add the failed transaction to the list with status "Failed"
                    const transactionRecord = {
                        date: new Date().toLocaleString(),
                        id: 'N/A',
                        amount: amount,
                        status: 'Failed'
                    };
                    transactions.push(transactionRecord);

                    // Render the transactions
                    renderTransactions();

                    alert('Transaction failed. Check console for details.');
                }
            });

            // Function to render transactions in the table
            function renderTransactions() {
                transactionList.innerHTML = transactions.map(tx => `
            <tr>
                <td>${tx.date}</td>
                <td>${tx.id}</td>
                <td>${tx.amount} ETH</td>
                <td>${tx.status}</td>
            </tr>
        `).join('');
            }
        });

    </script>
</body>

</html>